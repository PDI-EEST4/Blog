---
import SiteLayout from "./SiteLayout.astro"

interface Props {
  title: string
}

const { title } = Astro.props
---

<SiteLayout title={title}>
  <div class="row">
    <div class="col-md-4 col-lg-3">
      <ul id="map" class="sticky-top list-unstyled pt-3 user-select-none"></ul>
    </div>
    <div id="lesson-content" class="col-md-8">
      <slot />
    </div>
  </div>
</SiteLayout>

<!-- Table of Contents -->
<script>
  const $map = document.querySelector("#map")
  const $lessonContent = document.querySelector("#lesson-content")
  const $headings = $lessonContent.querySelectorAll(
    "h1, h2, h3, h4, h5, h6"
  ) as NodeListOf<HTMLElement>

  $headings.forEach(($heading) => {
    const tag = $heading.tagName.toLowerCase()
    const $wrapper = document.createElement("li")
    const $link = document.createElement("a")

    $link.href = `#${$heading.id}`
    $link.innerText = $heading.innerText
    $wrapper.classList.add(`ms-${Number(tag[1]) + 1}`)
    $link.classList.add("text-black-50", "text-decoration-none")

    $wrapper.appendChild($link)
    $map.appendChild($wrapper)
  })

  let $lastActiveLink = $map.querySelector(`a[href="#${$headings[0].id}"]`)
  if ($lastActiveLink) {
    $lastActiveLink.classList.add("text-info", "text-decoration-underline")
    $lastActiveLink.classList.remove("text-black-50")
  }

  const observer = new IntersectionObserver(
    (entries) => {
      const visibleEntry = entries
        .filter((entry) => entry.isIntersecting)
        .sort(
          (a, b) =>
            Math.abs(a.boundingClientRect.top) -
            Math.abs(b.boundingClientRect.top)
        )[0]

      if (visibleEntry) {
        const activeLink = $map.querySelector(
          `a[href="#${visibleEntry.target.id}"]`
        )

        if ($lastActiveLink && $lastActiveLink !== activeLink) {
          $lastActiveLink.classList.remove(
            "text-info",
            "text-decoration-underline"
          )
          $lastActiveLink.classList.add("text-black-50")
        }

        if (activeLink) {
          activeLink.classList.add("text-info", "text-decoration-underline")
          activeLink.classList.remove("text-black-50")
          $lastActiveLink = activeLink
        }
      }
    },
    {
      rootMargin: "0px 0px -95% 0px",
      threshold: 0.85,
    }
  )

  $headings.forEach(($heading) => {
    observer.observe($heading)
  })
</script>

<!-- Copy to Clipboard Button on Code Blocks -->
<script>
  const $lessonContent = document.querySelector("#lesson-content")
  const $codeBlocks = $lessonContent.querySelectorAll("pre")

  const preCopyLabel = "Copiar"
  const postCopyLabel = "Copiado!"
  const msForLabelReset = 700

  function createCopyCodeButton($target) {
    const $copyButton = document.createElement("button")
    $copyButton.type = "button"
    $copyButton.classList.add(
      "btn",
      "btn-primary",
      "btn-sm",
      "position-absolute",
      "top-0",
      "end-0"
    )
    $copyButton.style = "margin-right: 5px; margin-top: 5px;"
    $copyButton.innerText = preCopyLabel

    $copyButton.addEventListener("click", () => {
      const $code = $target.querySelector("code")

      navigator.clipboard.writeText($code.innerText).then(() => {
        $copyButton.innerText = postCopyLabel
      })

      setTimeout(() => {
        $copyButton.innerText = preCopyLabel
      }, msForLabelReset)
    })

    return $copyButton
  }

  $codeBlocks.forEach(($codeBlock) => {
    const $button = createCopyCodeButton($codeBlock)
    $codeBlock.classList.add("position-relative")
    $codeBlock.appendChild($button)
  })
</script>

<style is:global>
  pre button {
    visibility: hidden;
  }

  pre:hover button {
    visibility: visible;
  }

  blockquote::before {
    content: " ";
    position: absolute;
    width: 100%;
    height: 100%;
    margin: -5px -25px;
    background: linear-gradient(
      90deg,
      color-mix(in srgb, var(--bs-primary) 30%, transparent 100%) 0%,
      rgba(255, 255, 255, 0) 50%
    );
    filter: blur(2px);
    z-index: -1;
  }

  blockquote {
    position: relative;
    border-left: 0.25em solid var(--bs-primary);
    padding: 5px 25px;
    color: var(--bs-gray);
  }

  a.text-info {
    transition:
      color 0.3s,
      text-decoration 0.3s;
  }
</style>
